;;; sweeprolog-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from sweeprolog.el

 (autoload 'sweeprolog-help-prefix-map "sweeprolog" nil t 'keymap)
 (autoload 'sweeprolog-prefix-map "sweeprolog" nil t 'keymap)
(autoload 'sweeprolog-xref-project-source-files "sweeprolog" "\
Update cross reference data for all Prolog files in PROJECT.

If PROJECT is nil, update data for the current project.

If called interactively with a prefix argument, prompt for
PROJECT (only on Emacs 28 or later).

(fn &optional PROJECT)" t)
(autoload 'sweeprolog-find-predicate "sweeprolog" "\
Jump to the definition of the Prolog predicate PI.

PI should be a string of the form \"M:F/A\" or \"M:F//A\", where
M is a Prolog module name, F is a functor and A is its arity.

If OTHER-WINDOW is non-nil, find it in another window.

Interactively, this command prompts for PI, and OTHER-WINDOW is
the prefix argument.

(fn PI &optional OTHER-WINDOW)" t)
(autoload 'sweeprolog-find-module "sweeprolog" "\
Jump to the source file of the Prolog module MOD.

If OTHER-WINDOW is non-nil, find it in another window.

Interactively, OTHER-WINDOW is the prefix argument and this
command prompts for MOD.

(fn MOD &optional OTHER-WINDOW)" t)
(autoload 'sweeprolog-pack-install "sweeprolog" "\
Install or upgrade Prolog package PACK.

(fn PACK)" t)
(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))
(autoload 'sweeprolog-top-level "sweeprolog" "\
Run a Prolog top-level in a buffer.

BUFFER-NAME is passed to `sweeprolog-top-level-buffer' to obtain
an appropriate buffer.

Interactively, a prefix argument means to prompt for BUFFER-NAME.

(fn &optional BUFFER-NAME)" t)
(autoload 'sweeprolog-top-level-send-goal "sweeprolog" "\
Send GOAL to a top-level buffer and display that buffer.

(fn GOAL)" t)
(autoload 'sweeprolog-top-level-mode "sweeprolog" "\
Major mode for interacting with an inferior Prolog interpreter.

(fn)" t)
(autoload 'sweeprolog-file-name-handler "sweeprolog" "\


(fn OPERATION &rest ARGS)")
(autoload 'sweeprolog-electric-layout-mode "sweeprolog" "\
Automatically adjust whitespace in `sweeprolog-mode' buffers.

When enabled, spaces are automatically inserted as you type in
certain contexts to maintain conventional Prolog layout.

This is a minor mode.  If called interactively, toggle the
`Sweeprolog-Electric-Layout mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sweeprolog-electric-layout-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'sweeprolog-mode "sweeprolog" "\
Major mode for reading and editing Prolog code.

(fn)" t)
(autoload 'sweeprolog-info-manual "sweeprolog" "\
Display the Sweep manual in Info mode." t)
(autoload 'sweeprolog-view-news "sweeprolog" "\
View the Sweep News file, which lists recent changes to Sweep." t)
(autoload 'sweeprolog-describe-module "sweeprolog" "\
Display the full documentation for MOD (a Prolog module).

(fn MOD)" t)
(autoload 'sweeprolog-describe-predicate "sweeprolog" "\
Display the full documentation for PRED (a Prolog predicate).

(fn PRED)" t)
(autoload 'sweeprolog-forward-hole-on-tab-mode "sweeprolog" "\
Make TAB do the Right Thing in `sweeprolog-mode'.

When enabled, this minor mode binds TAB to the command
`sweeprolog-indent-or-forward-hole', which moves to the next hole
in the buffer when the called in a line that's already indented
properly.

This is a minor mode.  If called interactively, toggle the
`Sweeprolog-Forward-Hole-On-Tab mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sweeprolog-forward-hole-on-tab-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'sweeprolog-handle-command-line-args "sweeprolog" "\
Add flag `--swipl-args' to Emacs's command line handling.")
(autoload 'sweeprolog-term-search "sweeprolog" "\
Search for terms matching TEMPLATE.

If BACKWARD is non-nil, search backward from point, otherwise
search forward.

CONDITION is a Prolog goal that this commands runs for each
matching term.  If the goal fails this command disregards the
corresponding match.  CONDITION can share variables with
TEMPLATE, in which case this commands unifies these sharing
variables with the corresponding subterms of the matching term.
If CONDITION is omitted or nil, it defaults to \"true\".

CLASS is the class of terms to target, it can be one of `clause',
`head', `goal', `data' and `_'.  `clause' only matches whole
clauses, `head' only matches head terms, `goal' only matches goal
terms, `data' only matches data terms, and `_' matches any term.
CLASS can also be a list of one or more of these symbols, in
which a term matches if it matches any of the classes in CLASS.
If CLASS is omitted or nil, it defaults to `_'.

Interactively, prompt for TEMPLATE.  With a prefix argument
\\[universal-argument], prompt for CONDITION.  With a double
prefix argument \\[universal-argument] \\[universal-argument],
prompt for CLASS as well.  A negative prefix argument
\\[negative-argument] searches backward from point.

(fn TEMPLATE &optional BACKWARD CONDITION CLASS)" '(sweeprolog-mode))
(autoload 'sweeprolog-query-replace-term "sweeprolog" "\
Replace some terms after point matching TEMPLATE with REPLACEMENT.

When the region is active, replace matching terms in region.

Query before performing each replacement.

Matching terms are those that the Prolog term TEMPLATE (given as
a string) subsumes.  REPLACEMENT is a Prolog term to insert in
place of matching terms.  REPLACEMENT can share variables with
TEMPLATE, in which case this commands unifies these sharing
variables with the corresponding subterms of the matching term.

CONDITION is a Prolog goal that this commands runs for each
matching term.  If the goal fails this command disregards the
corresponding match and does not suggest replacing it.  CONDITION
can share variables with TEMPLATE, similarly to REPLACEMENT.  If
CONDITION is omitted or nil, it defaults to \"true\".

CLASS is the class of terms to target, it can be one of `clause',
`head', `goal', `data' and `_'.  `clause' only matches whole
clauses, `head' only matches head terms, `goal' only matches goal
terms, `data' only matches data terms, and `_' matches any term.
CLASS can also be a list of one or more of these symbols, in
which a term matches if it matches any of the classes in CLASS.
If CLASS is omitted or nil, it defaults to `_'.

Interactively, prompt for TEMPLATE and REPLACEMENT.  With a
prefix argument \\[universal-argument], prompt for CONDITION.
With a double prefix argument \\[universal-argument] \\[universal-argument],
prompt for CLASS as well.

(fn TEMPLATE REPLACEMENT &optional CONDITION CLASS)" '(sweeprolog-mode))
(autoload 'sweeprolog-async-goal "sweeprolog" "\
Execute GOAL and display its output in a buffer asynchronously.

(fn GOAL)" t)
(register-definition-prefixes "sweeprolog" '("prolog-exception" "sweeprolog-"))


;;; Generated autoloads from sweeprolog-pce-theme.el

(register-definition-prefixes "sweeprolog-pce-theme" '("sweeprolog-pce"))


;;; Generated autoloads from sweeprolog-tests.el

(register-definition-prefixes "sweeprolog-tests" '("sweeprolog-"))

;;; End of scraped data

(provide 'sweeprolog-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; sweeprolog-autoloads.el ends here
